{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anila\\\\capstone\\\\CS-24-314-Graph-QL---Providing-Different-Perspectives\\\\src\\\\my-dashboard\\\\src\\\\components\\\\Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport Dashboard from \"./Dashboard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  const {\n    user,\n    isAuthenticated,\n    getIdTokenClaims\n  } = useAuth0();\n  const [userRoles, setUserRoles] = useState([]);\n  useEffect(() => {\n    const fetchUserRoles = async () => {\n      try {\n        if (isAuthenticated) {\n          const idTokenClaims = await getIdTokenClaims();\n          const roles = idTokenClaims[\"http://localhost:3000/user_id\"] || [];\n          setUserRoles(roles);\n\n          // Pass roles to Hasura\n          const token = await getIdTokenClaims(); // Get the ID token\n          const response = await fetch('https://clean-wasp-50.hasura.app/v1/graphql', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'x-hasura-role': roles,\n              // Pass roles as comma-separated string\n              'Authorization': `Bearer ${token.__raw}` // Pass the ID token\n            },\n            body: JSON.stringify({}) // You can optionally include a body if needed\n          });\n\n          // Handle response as needed\n          if (!response.ok) {\n            throw new Error('Failed to pass roles to Hasura');\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching user roles:', error);\n      }\n    };\n    fetchUserRoles();\n  }, [getIdTokenClaims, isAuthenticated]);\n  return isAuthenticated && /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: user.picture,\n      alt: user.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: user.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: user.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Roles: \", user.join(\", \")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 7\n  }, this);\n};\n_s(Profile, \"OKDpUYfwbs23Zh4tY8l3oYa6+g8=\", false, function () {\n  return [useAuth0];\n});\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useEffect","useState","useAuth0","Dashboard","jsxDEV","_jsxDEV","Profile","_s","user","isAuthenticated","getIdTokenClaims","userRoles","setUserRoles","fetchUserRoles","idTokenClaims","roles","token","response","fetch","method","headers","__raw","body","JSON","stringify","ok","Error","error","console","children","src","picture","alt","name","fileName","_jsxFileName","lineNumber","columnNumber","email","join","_c","$RefreshReg$"],"sources":["C:/Users/anila/capstone/CS-24-314-Graph-QL---Providing-Different-Perspectives/src/my-dashboard/src/components/Profile.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport Dashboard from \"./Dashboard\";\r\n\r\nconst Profile = () => {\r\n  const { user, isAuthenticated, getIdTokenClaims } = useAuth0();\r\n  const [userRoles, setUserRoles] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchUserRoles = async () => {\r\n      try {\r\n        if (isAuthenticated) {\r\n          const idTokenClaims = await getIdTokenClaims();\r\n          const roles = idTokenClaims[\"http://localhost:3000/user_id\"] || [];\r\n          setUserRoles(roles);\r\n\r\n          // Pass roles to Hasura\r\n          const token = await getIdTokenClaims(); // Get the ID token\r\n          const response = await fetch('https://clean-wasp-50.hasura.app/v1/graphql', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'x-hasura-role': roles, // Pass roles as comma-separated string\r\n              'Authorization': `Bearer ${token.__raw}` // Pass the ID token\r\n            },\r\n            body: JSON.stringify({}) // You can optionally include a body if needed\r\n          });\r\n\r\n          // Handle response as needed\r\n          if (!response.ok) {\r\n            throw new Error('Failed to pass roles to Hasura');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching user roles:', error);\r\n      }\r\n    };\r\n\r\n    fetchUserRoles();\r\n  }, [getIdTokenClaims, isAuthenticated]);\r\n\r\n  return (\r\n    isAuthenticated && (\r\n      <div>\r\n        <img src={user.picture} alt={user.name} />\r\n        <h2>{user.name}</h2>\r\n        <p>{user.email}</p>\r\n        <p>Roles: {user.join(\", \")}</p> \r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM;IAAEC,IAAI;IAAEC,eAAe;IAAEC;EAAiB,CAAC,GAAGR,QAAQ,CAAC,CAAC;EAC9D,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,MAAMa,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,IAAIJ,eAAe,EAAE;UACnB,MAAMK,aAAa,GAAG,MAAMJ,gBAAgB,CAAC,CAAC;UAC9C,MAAMK,KAAK,GAAGD,aAAa,CAAC,+BAA+B,CAAC,IAAI,EAAE;UAClEF,YAAY,CAACG,KAAK,CAAC;;UAEnB;UACA,MAAMC,KAAK,GAAG,MAAMN,gBAAgB,CAAC,CAAC,CAAC,CAAC;UACxC,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAA6C,EAAE;YAC1EC,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACP,cAAc,EAAE,kBAAkB;cAClC,eAAe,EAAEL,KAAK;cAAE;cACxB,eAAe,EAAG,UAASC,KAAK,CAACK,KAAM,EAAC,CAAC;YAC3C,CAAC;YACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;UAC3B,CAAC,CAAC;;UAEF;UACA,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;YAChB,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;UACnD;QACF;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IAEDd,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACH,gBAAgB,EAAED,eAAe,CAAC,CAAC;EAEvC,OACEA,eAAe,iBACbJ,OAAA;IAAAwB,QAAA,gBACExB,OAAA;MAAKyB,GAAG,EAAEtB,IAAI,CAACuB,OAAQ;MAACC,GAAG,EAAExB,IAAI,CAACyB;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1ChC,OAAA;MAAAwB,QAAA,EAAKrB,IAAI,CAACyB;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACpBhC,OAAA;MAAAwB,QAAA,EAAIrB,IAAI,CAAC8B;IAAK;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnBhC,OAAA;MAAAwB,QAAA,GAAG,SAAO,EAACrB,IAAI,CAAC+B,IAAI,CAAC,IAAI,CAAC;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5B,CACN;AAEL,CAAC;AAAC9B,EAAA,CA/CID,OAAO;EAAA,QACyCJ,QAAQ;AAAA;AAAAsC,EAAA,GADxDlC,OAAO;AAiDb,eAAeA,OAAO;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}