{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anila\\\\capstone\\\\CS-24-314-Graph-QL---Providing-Different-Perspectives\\\\src\\\\my-dashboard\\\\src\\\\components\\\\Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  const {\n    user,\n    isAuthenticated,\n    getIdTokenClaims\n  } = useAuth0();\n  const [role, setRole] = useState(null);\n  useEffect(() => {\n    const fetchUserRole = async () => {\n      try {\n        if (isAuthenticated) {\n          const idTokenClaims = await getIdTokenClaims();\n          const userId = idTokenClaims[\"http://localhost:3000/user_id\"];\n          if (userId) {\n            // Assuming you have some logic to determine the user's role based on userId\n            // For demonstration, let's say you have some predefined mapping\n            const role = determineUserRole(userId);\n            setRole(role);\n          } else {\n            throw new Error('User ID not found in token claims');\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching user role:', error);\n      }\n    };\n    fetchUserRole();\n  }, [getIdTokenClaims, isAuthenticated]);\n  const determineUserRole = userId => {\n    // Example logic to determine user role based on userId\n    // You can replace this with your actual logic\n    if (userId === \"user_id\") {\n      return \"User\";\n    } else if (userId === \"admin_id\") {\n      return \"Admin\";\n    } else if (userId === \"host_id\") {\n      return \"Host\";\n    } else {\n      return \"Unknown\";\n    }\n  };\n  return isAuthenticated && /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: user.picture,\n      alt: user.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: user.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: user.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), role && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"User Role: \", role]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 7\n  }, this);\n};\n_s(Profile, \"WP6TqMCcG8sLr5j2Z5M8VXvB2pA=\", false, function () {\n  return [useAuth0];\n});\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useEffect","useState","useAuth0","jsxDEV","_jsxDEV","Profile","_s","user","isAuthenticated","getIdTokenClaims","role","setRole","fetchUserRole","idTokenClaims","userId","determineUserRole","Error","error","console","children","src","picture","alt","name","fileName","_jsxFileName","lineNumber","columnNumber","email","_c","$RefreshReg$"],"sources":["C:/Users/anila/capstone/CS-24-314-Graph-QL---Providing-Different-Perspectives/src/my-dashboard/src/components/Profile.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\nconst Profile = () => {\r\n  const { user, isAuthenticated, getIdTokenClaims } = useAuth0();\r\n  const [role, setRole] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchUserRole = async () => {\r\n      try {\r\n        if (isAuthenticated) {\r\n          const idTokenClaims = await getIdTokenClaims();\r\n          const userId = idTokenClaims[\"http://localhost:3000/user_id\"];\r\n          if (userId) {\r\n            // Assuming you have some logic to determine the user's role based on userId\r\n            // For demonstration, let's say you have some predefined mapping\r\n            const role = determineUserRole(userId);\r\n            setRole(role);\r\n          } else {\r\n            throw new Error('User ID not found in token claims');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching user role:', error);\r\n      }\r\n    };\r\n\r\n    fetchUserRole();\r\n  }, [getIdTokenClaims, isAuthenticated]);\r\n\r\n  const determineUserRole = (userId) => {\r\n    // Example logic to determine user role based on userId\r\n    // You can replace this with your actual logic\r\n    if (userId === \"user_id\") {\r\n      return \"User\";\r\n    } else if (userId === \"admin_id\") {\r\n      return \"Admin\";\r\n    } else if (userId === \"host_id\") {\r\n      return \"Host\";\r\n    } else {\r\n      return \"Unknown\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    isAuthenticated && (\r\n      <div>\r\n        <img src={user.picture} alt={user.name} />\r\n        <h2>{user.name}</h2>\r\n        <p>{user.email}</p>\r\n        {role && <p>User Role: {role}</p>}\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM;IAAEC,IAAI;IAAEC,eAAe;IAAEC;EAAiB,CAAC,GAAGP,QAAQ,CAAC,CAAC;EAC9D,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd,MAAMY,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,IAAIJ,eAAe,EAAE;UACnB,MAAMK,aAAa,GAAG,MAAMJ,gBAAgB,CAAC,CAAC;UAC9C,MAAMK,MAAM,GAAGD,aAAa,CAAC,+BAA+B,CAAC;UAC7D,IAAIC,MAAM,EAAE;YACV;YACA;YACA,MAAMJ,IAAI,GAAGK,iBAAiB,CAACD,MAAM,CAAC;YACtCH,OAAO,CAACD,IAAI,CAAC;UACf,CAAC,MAAM;YACL,MAAM,IAAIM,KAAK,CAAC,mCAAmC,CAAC;UACtD;QACF;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IAEDL,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACH,gBAAgB,EAAED,eAAe,CAAC,CAAC;EAEvC,MAAMO,iBAAiB,GAAID,MAAM,IAAK;IACpC;IACA;IACA,IAAIA,MAAM,KAAK,SAAS,EAAE;MACxB,OAAO,MAAM;IACf,CAAC,MAAM,IAAIA,MAAM,KAAK,UAAU,EAAE;MAChC,OAAO,OAAO;IAChB,CAAC,MAAM,IAAIA,MAAM,KAAK,SAAS,EAAE;MAC/B,OAAO,MAAM;IACf,CAAC,MAAM;MACL,OAAO,SAAS;IAClB;EACF,CAAC;EAED,OACEN,eAAe,iBACbJ,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAKgB,GAAG,EAAEb,IAAI,CAACc,OAAQ;MAACC,GAAG,EAAEf,IAAI,CAACgB;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1CvB,OAAA;MAAAe,QAAA,EAAKZ,IAAI,CAACgB;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACpBvB,OAAA;MAAAe,QAAA,EAAIZ,IAAI,CAACqB;IAAK;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAClBjB,IAAI,iBAAIN,OAAA;MAAAe,QAAA,GAAG,aAAW,EAACT,IAAI;IAAA;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9B,CACN;AAEL,CAAC;AAACrB,EAAA,CAnDID,OAAO;EAAA,QACyCH,QAAQ;AAAA;AAAA2B,EAAA,GADxDxB,OAAO;AAqDb,eAAeA,OAAO;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}