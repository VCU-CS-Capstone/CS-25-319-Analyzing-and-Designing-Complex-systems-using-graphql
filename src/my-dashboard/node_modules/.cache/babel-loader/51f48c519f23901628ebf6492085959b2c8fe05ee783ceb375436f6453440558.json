{"ast":null,"code":"var _jsxFileName = \"/Users/gracejohnson/CS-24-314-Graph-QL---Providing-Different-Perspectives/src/my-dashboard/src/components/Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  const {\n    user,\n    isAuthenticated,\n    getAccessTokenSilently\n  } = useAuth0();\n  const [userMetadata, setUserMetadata] = useState(null);\n  useEffect(() => {\n    const fetchUserMetadata = async () => {\n      try {\n        if (isAuthenticated) {\n          const accessToken = await getAccessTokenSilently();\n          // You can use the access token to fetch additional user metadata,\n          // such as roles, from your backend API.\n          // Example:\n          // const response = await fetch(\"YOUR_BACKEND_API_ENDPOINT\", {\n          //   headers: {\n          //     Authorization: `Bearer ${accessToken}`,\n          //   },\n          // });\n          // const data = await response.json();\n          // setUserMetadata(data);\n        }\n      } catch (error) {\n        console.error(\"Error fetching user metadata:\", error);\n      }\n    };\n    fetchUserMetadata();\n  }, [getAccessTokenSilently, isAuthenticated]);\n  return isAuthenticated && /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: user.picture,\n      alt: user.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: user.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: user.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), userMetadata && userMetadata.roles && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Role: \", userMetadata.roles.join(\", \")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 7\n  }, this);\n};\n_s(Profile, \"o7HJiKw9oecKlmC5I5edv05HmBo=\", false, function () {\n  return [useAuth0];\n});\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useEffect","useState","useAuth0","jsxDEV","_jsxDEV","Profile","_s","user","isAuthenticated","getAccessTokenSilently","userMetadata","setUserMetadata","fetchUserMetadata","accessToken","error","console","children","src","picture","alt","name","fileName","_jsxFileName","lineNumber","columnNumber","email","roles","join","_c","$RefreshReg$"],"sources":["/Users/gracejohnson/CS-24-314-Graph-QL---Providing-Different-Perspectives/src/my-dashboard/src/components/Profile.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\nconst Profile = () => {\r\n  const { user, isAuthenticated, getAccessTokenSilently } = useAuth0();\r\n  const [userMetadata, setUserMetadata] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchUserMetadata = async () => {\r\n      try {\r\n        if (isAuthenticated) {\r\n          const accessToken = await getAccessTokenSilently();\r\n          // You can use the access token to fetch additional user metadata,\r\n          // such as roles, from your backend API.\r\n          // Example:\r\n          // const response = await fetch(\"YOUR_BACKEND_API_ENDPOINT\", {\r\n          //   headers: {\r\n          //     Authorization: `Bearer ${accessToken}`,\r\n          //   },\r\n          // });\r\n          // const data = await response.json();\r\n          // setUserMetadata(data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching user metadata:\", error);\r\n      }\r\n    };\r\n\r\n    fetchUserMetadata();\r\n  }, [getAccessTokenSilently, isAuthenticated]);\r\n\r\n  return (\r\n    isAuthenticated && (\r\n      <div>\r\n        <img src={user.picture} alt={user.name} />\r\n        <h2>{user.name}</h2>\r\n        <p>{user.email}</p>\r\n        {/* Display user's role if available */}\r\n        {userMetadata && userMetadata.roles && (\r\n          <p>Role: {userMetadata.roles.join(\", \")}</p>\r\n        )}\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM;IAAEC,IAAI;IAAEC,eAAe;IAAEC;EAAuB,CAAC,GAAGP,QAAQ,CAAC,CAAC;EACpE,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEtDD,SAAS,CAAC,MAAM;IACd,MAAMY,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACF,IAAIJ,eAAe,EAAE;UACnB,MAAMK,WAAW,GAAG,MAAMJ,sBAAsB,CAAC,CAAC;UAClD;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;QACF;MACF,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;IAEDF,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,CAACH,sBAAsB,EAAED,eAAe,CAAC,CAAC;EAE7C,OACEA,eAAe,iBACbJ,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAKa,GAAG,EAAEV,IAAI,CAACW,OAAQ;MAACC,GAAG,EAAEZ,IAAI,CAACa;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1CpB,OAAA;MAAAY,QAAA,EAAKT,IAAI,CAACa;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACpBpB,OAAA;MAAAY,QAAA,EAAIT,IAAI,CAACkB;IAAK;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAElBd,YAAY,IAAIA,YAAY,CAACgB,KAAK,iBACjCtB,OAAA;MAAAY,QAAA,GAAG,QAAM,EAACN,YAAY,CAACgB,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC;IAAA;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAC5C;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CACN;AAEL,CAAC;AAAClB,EAAA,CAzCID,OAAO;EAAA,QAC+CH,QAAQ;AAAA;AAAA0B,EAAA,GAD9DvB,OAAO;AA2Cb,eAAeA,OAAO;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}