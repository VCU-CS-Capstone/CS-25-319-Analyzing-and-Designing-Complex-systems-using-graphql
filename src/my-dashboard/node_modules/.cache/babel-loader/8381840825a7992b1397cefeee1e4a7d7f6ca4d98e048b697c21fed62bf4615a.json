{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anila\\\\capstone\\\\CS-24-314-Graph-QL---Providing-Different-Perspectives\\\\src\\\\my-dashboard\\\\src\\\\components\\\\Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { useQuery, gql } from '@apollo/client'; // Import useQuery and gql from Apollo Client\nimport Dashboard from \"./Dashboard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_DATA = gql`\n  query MyQuery($offset: Int!, $limit: Int!) {\n    Table3(offset: $offset, limit: $limit) {\n      id\n      bnb_name\n      host_id\n      host_name\n      neighborhood_group\n      neighborhood\n      latitude\n      longitude\n      room_type\n      price\n      minimum_nights\n      number_of_reviews\n      last_review\n      reviews_per_month\n      calculated_host_listings_count\n      availability_365\n    }\n    Table3_aggregate {\n      aggregate {\n        totalCount: count\n      }\n    }\n  }\n`;\nconst Profile = () => {\n  _s();\n  const {\n    user,\n    isAuthenticated,\n    getIdTokenClaims\n  } = useAuth0();\n  const [userId, setUserId] = useState(null);\n\n  // Execute the query using useQuery hook\n  const {\n    loading,\n    error,\n    data,\n    refetch\n  } = useQuery(GET_DATA, {\n    variables: {\n      offset: 0,\n      // You might need to adjust offset and limit based on your pagination logic\n      limit: 10\n    },\n    skip: true // Skip initially to avoid executing the query before user authentication\n  });\n  useEffect(() => {\n    const fetchUserId = async () => {\n      try {\n        if (isAuthenticated) {\n          const idTokenClaims = await getIdTokenClaims();\n          const userId = idTokenClaims[\"http://localhost:3000/user_id\"];\n          if (userId) {\n            setUserId(userId);\n\n            // Pass user_id to Hasura\n            const token = await getIdTokenClaims(); // Get the ID token\n            const response = await fetch('https://clean-wasp-50.hasura.app/v1/graphql', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'x-hasura-user-id': userId,\n                // Pass user_id\n                'Authorization': `Bearer ${token.__raw}` // Pass the ID token\n              },\n              body: JSON.stringify({}) // You can optionally include a body if needed\n            });\n\n            // Handle response as needed\n            if (!response.ok) {\n              throw new Error('Failed to pass user_id to Hasura');\n            } else {\n              // If user ID is successfully fetched and passed to Hasura, then refetch the data\n              refetch();\n            }\n          } else {\n            throw new Error('User ID not found in token claims');\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching user ID:', error);\n      }\n    };\n    fetchUserId();\n  }, [getIdTokenClaims, isAuthenticated, refetch]);\n  return isAuthenticated && /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: user.picture,\n      alt: user.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: user.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: user.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this), userId && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"User ID: \", userId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 20\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }, this) :\n    /*#__PURE__*/\n    // Render fetched data here\n    _jsxDEV(\"div\", {\n      children: data && data.Table3 && /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: data.Table3.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: item.bnb_name\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 19\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 7\n  }, this);\n};\n_s(Profile, \"GqPedsw5dO1dRr7F8JkTIar9/H0=\", false, function () {\n  return [useAuth0, useQuery];\n});\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useEffect","useState","useAuth0","useQuery","gql","Dashboard","jsxDEV","_jsxDEV","GET_DATA","Profile","_s","user","isAuthenticated","getIdTokenClaims","userId","setUserId","loading","error","data","refetch","variables","offset","limit","skip","fetchUserId","idTokenClaims","token","response","fetch","method","headers","__raw","body","JSON","stringify","ok","Error","console","children","src","picture","alt","name","fileName","_jsxFileName","lineNumber","columnNumber","email","message","Table3","map","item","bnb_name","id","_c","$RefreshReg$"],"sources":["C:/Users/anila/capstone/CS-24-314-Graph-QL---Providing-Different-Perspectives/src/my-dashboard/src/components/Profile.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport { useQuery, gql } from '@apollo/client'; // Import useQuery and gql from Apollo Client\r\nimport Dashboard from \"./Dashboard\";\r\n\r\nconst GET_DATA = gql`\r\n  query MyQuery($offset: Int!, $limit: Int!) {\r\n    Table3(offset: $offset, limit: $limit) {\r\n      id\r\n      bnb_name\r\n      host_id\r\n      host_name\r\n      neighborhood_group\r\n      neighborhood\r\n      latitude\r\n      longitude\r\n      room_type\r\n      price\r\n      minimum_nights\r\n      number_of_reviews\r\n      last_review\r\n      reviews_per_month\r\n      calculated_host_listings_count\r\n      availability_365\r\n    }\r\n    Table3_aggregate {\r\n      aggregate {\r\n        totalCount: count\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Profile = () => {\r\n  const { user, isAuthenticated, getIdTokenClaims } = useAuth0();\r\n  const [userId, setUserId] = useState(null);\r\n\r\n  // Execute the query using useQuery hook\r\n  const { loading, error, data, refetch } = useQuery(GET_DATA, {\r\n    variables: {\r\n      offset: 0, // You might need to adjust offset and limit based on your pagination logic\r\n      limit: 10\r\n    },\r\n    skip: true // Skip initially to avoid executing the query before user authentication\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchUserId = async () => {\r\n      try {\r\n        if (isAuthenticated) {\r\n          const idTokenClaims = await getIdTokenClaims();\r\n          const userId = idTokenClaims[\"http://localhost:3000/user_id\"];\r\n          if (userId) {\r\n            setUserId(userId);\r\n\r\n            // Pass user_id to Hasura\r\n            const token = await getIdTokenClaims(); // Get the ID token\r\n            const response = await fetch('https://clean-wasp-50.hasura.app/v1/graphql', {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n                'x-hasura-user-id': userId, // Pass user_id\r\n                'Authorization': `Bearer ${token.__raw}` // Pass the ID token\r\n              },\r\n              body: JSON.stringify({}) // You can optionally include a body if needed\r\n            });\r\n\r\n            // Handle response as needed\r\n            if (!response.ok) {\r\n              throw new Error('Failed to pass user_id to Hasura');\r\n            } else {\r\n              // If user ID is successfully fetched and passed to Hasura, then refetch the data\r\n              refetch();\r\n            }\r\n          } else {\r\n            throw new Error('User ID not found in token claims');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching user ID:', error);\r\n      }\r\n    };\r\n\r\n    fetchUserId();\r\n  }, [getIdTokenClaims, isAuthenticated, refetch]);\r\n\r\n  return (\r\n    isAuthenticated && (\r\n      <div>\r\n        <img src={user.picture} alt={user.name} />\r\n        <h2>{user.name}</h2>\r\n        <p>{user.email}</p>\r\n        {userId && <p>User ID: {userId}</p>}\r\n        {/* Render fetched data */}\r\n        {loading ? (\r\n          <p>Loading data...</p>\r\n        ) : error ? (\r\n          <p>Error: {error.message}</p>\r\n        ) : (\r\n          // Render fetched data here\r\n          <div>\r\n            {/* Example rendering of fetched data */}\r\n            {data && data.Table3 && (\r\n              <ul>\r\n                {data.Table3.map(item => (\r\n                  <li key={item.id}>{item.bnb_name}</li>\r\n                ))}\r\n              </ul>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}