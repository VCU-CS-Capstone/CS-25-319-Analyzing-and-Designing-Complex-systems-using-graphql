{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anila\\\\capstone\\\\CS-24-314-Graph-QL---Providing-Different-Perspectives\\\\src\\\\my-dashboard\\\\src\\\\components\\\\Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  const {\n    user,\n    isAuthenticated,\n    getIdTokenClaims\n  } = useAuth0();\n  const [userId, setUserId] = useState(null);\n  const [userRole, setUserRole] = useState(null);\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        if (isAuthenticated) {\n          const idTokenClaims = await getIdTokenClaims();\n          const userId = idTokenClaims[\"http://localhost:3000/user_id\"];\n          const userRole = idTokenClaims[\"http://localhost:3000/roles\"];\n          if (userId && userRole) {\n            setUserId(userId);\n            setUserRole(userRole);\n\n            // Pass user_id and role to Hasura\n            const token = await getIdTokenClaims(); // Get the ID token\n            const response = await fetch('https://clean-wasp-50.hasura.app/v1/graphql', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'x-hasura-user-id': userId,\n                'x-hasura-user-role': userRole,\n                // Pass user role\n                'Authorization': `Bearer ${token.__raw}`\n              },\n              body: JSON.stringify({})\n            });\n\n            // Handle response as needed\n            if (!response.ok) {\n              throw new Error('Failed to pass user data to Hasura');\n            }\n          } else {\n            throw new Error('User ID or role not found in token claims');\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n    };\n    fetchUserData();\n  }, [getIdTokenClaims, isAuthenticated]);\n  return isAuthenticated && /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: user.picture,\n      alt: user.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: user.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: user.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), userId && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"User ID: \", userId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 20\n    }, this), userRole && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"User Role: \", userRole]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 7\n  }, this);\n};\n_s(Profile, \"W/WFFW71A1CRnrjag+vXuF/hmWA=\", false, function () {\n  return [useAuth0];\n});\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useEffect","useState","useAuth0","jsxDEV","_jsxDEV","Profile","_s","user","isAuthenticated","getIdTokenClaims","userId","setUserId","userRole","setUserRole","fetchUserData","idTokenClaims","token","response","fetch","method","headers","__raw","body","JSON","stringify","ok","Error","error","console","children","src","picture","alt","name","fileName","_jsxFileName","lineNumber","columnNumber","email","_c","$RefreshReg$"],"sources":["C:/Users/anila/capstone/CS-24-314-Graph-QL---Providing-Different-Perspectives/src/my-dashboard/src/components/Profile.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\nconst Profile = () => {\r\n  const { user, isAuthenticated, getIdTokenClaims } = useAuth0();\r\n  const [userId, setUserId] = useState(null);\r\n  const [userRole, setUserRole] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchUserData = async () => {\r\n      try {\r\n        if (isAuthenticated) {\r\n          const idTokenClaims = await getIdTokenClaims();\r\n          const userId = idTokenClaims[\"http://localhost:3000/user_id\"];\r\n          const userRole = idTokenClaims[\"http://localhost:3000/roles\"];\r\n          if (userId && userRole) {\r\n            setUserId(userId);\r\n            setUserRole(userRole);\r\n\r\n            // Pass user_id and role to Hasura\r\n            const token = await getIdTokenClaims(); // Get the ID token\r\n            const response = await fetch('https://clean-wasp-50.hasura.app/v1/graphql', {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n                'x-hasura-user-id': userId,\r\n                'x-hasura-user-role': userRole, // Pass user role\r\n                'Authorization': `Bearer ${token.__raw}`\r\n              },\r\n              body: JSON.stringify({})\r\n            });\r\n\r\n            // Handle response as needed\r\n            if (!response.ok) {\r\n              throw new Error('Failed to pass user data to Hasura');\r\n            }\r\n          } else {\r\n            throw new Error('User ID or role not found in token claims');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching user data:', error);\r\n      }\r\n    };\r\n\r\n    fetchUserData();\r\n  }, [getIdTokenClaims, isAuthenticated]);\r\n\r\n  return (\r\n    isAuthenticated && (\r\n      <div>\r\n        <img src={user.picture} alt={user.name} />\r\n        <h2>{user.name}</h2>\r\n        <p>{user.email}</p>\r\n        {userId && <p>User ID: {userId}</p>}\r\n        {userRole && <p>User Role: {userRole}</p>}\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}