{"ast":null,"code":"var _jsxFileName = \"/Users/houdalahrouz/Desktop/CS-25-319-Analyzing-and-Designing-Complex-systems-using-graphql/src/my-dashboard/src/components/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport './Dashboard.css'; // Import the CSS file\nimport { Button } from 'react-bootstrap';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Spinner } from 'react-bootstrap';\nimport ScrollToTop from \"./ScrollToTop\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dashboard() {\n  _s();\n  var _data$employees_aggre, _data$employees_aggre2, _data$transactions_ag, _data$transactions_ag2, _data$inventory_aggre, _data$inventory_aggre2, _data$customers_aggre, _data$customers_aggre2;\n  const limit = 8; // Number of items per page\n  const tableRef = useRef(null); // Create a ref for the table element\n  const {\n    isAuthenticated,\n    loginWithRedirect,\n    user\n  } = useAuth0(); // Auth0 hook\n\n  let role;\n  let id = '0';\n  if (user) {\n    role = user[\"https://hasura.io/jwt/claims\"][\"x-hasura-role\"];\n    id = user['https://hasura.io/jwt/claims']['x-hasura-user-id'];\n    console.log(role);\n  } else {\n    loginWithRedirect();\n  }\n  const GET_DATA = gql`\n    query GetData(\n      $employeesOffset: Int, $transactionsOffset: Int,\n      $inventoryOffset: Int, $customersOffset: Int, $limit: Int, $id: String\n    ) {\n      ${role === \"HR_Manager\" || role === \"HR_Employee\" ? `\n        employees(offset: $employeesOffset, limit: $limit) {\n          employeeid firstname lastname email department\n        }\n        employees_aggregate { aggregate { count } }\n      ` : role === \"Sales_Manager\" ? `\n        employees(where: { departmentid: { _eq: \"102\" } }, offset: $employeesOffset, limit: $limit) {\n          employeeid firstname lastname email department\n        }\n        employees_aggregate(where: { departmentid: { _eq: \"102\" } }) { aggregate { count } }\n      ` : role === \"IT_Manager\" ? `\n        employees(offset: $employeesOffset, limit: $limit) {\n          employeeid firstname lastname email department\n        }\n        employees_aggregate(where: { departmentid: { _eq: \"103\" } }) { aggregate { count } }\n      ` : `\n        employees {\n          employeeid firstname lastname email department\n        }\n        employees_aggregate { aggregate { count } }\n      `}      \n      \n      ${[\"host\", \"Sales_Manager\", \"Sales_Employee\"].includes(role) ? `\n        transactions(offset: $transactionsOffset, limit: $limit) {\n          transactionid buyerid sellerid totalprice transactiondate\n        }\n        transactions_aggregate { aggregate { count } }\n      ` : \"\"}\n\n      ${[\"host\", \"IT_Manager\", \"IT_Employee\"].includes(role) ? `\n        inventory(offset: $inventoryOffset, limit: $limit) {\n          itemid itemdescription availablequantity itemprice\n        }\n        inventory_aggregate { aggregate { count } }\n      ` : \"\"}\n\n      ${[\"host\", \"Sales_Manager\", \"Sales_Employee\"].includes(role) ? `\n        customers(offset: $customersOffset, limit: $limit) {\n          customerid firstname lastname email phone address lastpurchasedate\n        }\n        customers_aggregate { aggregate { count } }\n      ` : \"\"}\n    }\n  `;\n  const [employeesPage, setEmployeesPage] = useState(1);\n  const [transactionsPage, setTransactionsPage] = useState(1);\n  const [inventoryPage, setInventoryPage] = useState(1);\n  const [customersPage, setCustomersPage] = useState(1);\n  const {\n    loading,\n    error,\n    data,\n    fetchMore\n  } = useQuery(GET_DATA, {\n    variables: {\n      employeesOffset: (employeesPage - 1) * limit,\n      transactionsOffset: (transactionsPage - 1) * limit,\n      inventoryOffset: (inventoryPage - 1) * limit,\n      customersOffset: (customersPage - 1) * limit,\n      limit: limit,\n      id: id\n    },\n    fetchPolicy: 'network-only'\n  });\n  console.log(data);\n  const [loadingState, setLoadingState] = useState(false);\n  useEffect(() => {\n    window.scrollTo(0, 0); // Scroll to top on mount\n  }, []);\n  useEffect(() => {\n    if (!isAuthenticated) {\n      loginWithRedirect(); // Redirect to login if not authenticated\n    }\n  }, [isAuthenticated, loginWithRedirect]);\n  useEffect(() => {\n    if (tableRef.current) {\n      tableRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start'\n      }); // Scroll to the table when it's rendered\n    }\n  }, [data]);\n  useEffect(() => {\n    if (employeesPage > 1 || transactionsPage > 1 || inventoryPage > 1 || customersPage > 1) {\n      fetchMore({\n        variables: {\n          employeesOffset: (employeesPage - 1) * limit,\n          transactionsOffset: (transactionsPage - 1) * limit,\n          inventoryOffset: (inventoryPage - 1) * limit,\n          customersOffset: (customersPage - 1) * limit,\n          limit: limit\n        },\n        updateQuery: (prev, {\n          fetchMoreResult\n        }) => {\n          if (!fetchMoreResult) return prev;\n          return {\n            ...prev,\n            Employees: fetchMoreResult.employees\n          };\n        }\n      });\n    }\n  }, [fetchMore, limit, customersPage, employeesPage, inventoryPage, transactionsPage]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 21\n  }, this);\n  const handlePageChange = (tableKey, setPage, newPage) => {\n    setLoadingState(true);\n    fetchMore({\n      variables: {\n        employeesOffset: tableKey === 'employees' ? (newPage - 1) * limit : (employeesPage - 1) * limit,\n        transactionsOffset: tableKey === 'transactions' ? (newPage - 1) * limit : (transactionsPage - 1) * limit,\n        inventoryOffset: tableKey === 'inventory' ? (newPage - 1) * limit : (inventoryPage - 1) * limit,\n        customersOffset: tableKey === 'customers' ? (newPage - 1) * limit : (customersPage - 1) * limit,\n        limit: limit\n      },\n      updateQuery: (prev, {\n        fetchMoreResult\n      }) => {\n        setTimeout(() => setLoadingState(false), 500);\n        return fetchMoreResult || prev;\n      }\n    });\n    setPage(newPage);\n  };\n  const tables = [{\n    title: 'Employees',\n    data: (data === null || data === void 0 ? void 0 : data.employees) || [],\n    columns: ['employeeid', 'firstname', 'lastname', 'email', 'department'],\n    page: employeesPage,\n    setPage: setEmployeesPage,\n    totalPages: Math.ceil(((data === null || data === void 0 ? void 0 : (_data$employees_aggre = data.employees_aggregate) === null || _data$employees_aggre === void 0 ? void 0 : (_data$employees_aggre2 = _data$employees_aggre.aggregate) === null || _data$employees_aggre2 === void 0 ? void 0 : _data$employees_aggre2.count) || 0) / limit)\n  }, {\n    title: 'Transactions',\n    data: (data === null || data === void 0 ? void 0 : data.transactions) || [],\n    columns: ['transactionid', 'buyerid', 'sellerid', 'totalprice', 'transactiondate'],\n    page: transactionsPage,\n    setPage: setTransactionsPage,\n    totalPages: Math.ceil(((data === null || data === void 0 ? void 0 : (_data$transactions_ag = data.transactions_aggregate) === null || _data$transactions_ag === void 0 ? void 0 : (_data$transactions_ag2 = _data$transactions_ag.aggregate) === null || _data$transactions_ag2 === void 0 ? void 0 : _data$transactions_ag2.count) || 0) / limit)\n  }, {\n    title: 'Inventory',\n    data: (data === null || data === void 0 ? void 0 : data.inventory) || [],\n    columns: ['itemid', 'itemdescription', 'availablequantity', 'itemprice'],\n    page: inventoryPage,\n    setPage: setInventoryPage,\n    totalPages: Math.ceil(((data === null || data === void 0 ? void 0 : (_data$inventory_aggre = data.inventory_aggregate) === null || _data$inventory_aggre === void 0 ? void 0 : (_data$inventory_aggre2 = _data$inventory_aggre.aggregate) === null || _data$inventory_aggre2 === void 0 ? void 0 : _data$inventory_aggre2.count) || 0) / limit)\n  }, {\n    title: 'Customers',\n    data: (data === null || data === void 0 ? void 0 : data.customers) || [],\n    columns: ['customerid', 'firstname', 'lastname', 'email', 'phone', 'address', 'lastpurchasedate'],\n    page: customersPage,\n    setPage: setCustomersPage,\n    totalPages: Math.ceil(((data === null || data === void 0 ? void 0 : (_data$customers_aggre = data.customers_aggregate) === null || _data$customers_aggre === void 0 ? void 0 : (_data$customers_aggre2 = _data$customers_aggre.aggregate) === null || _data$customers_aggre2 === void 0 ? void 0 : _data$customers_aggre2.count) || 0) / limit)\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"center-container\",\n    children: [/*#__PURE__*/_jsxDEV(ScrollToTop, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), loadingState && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      children: /*#__PURE__*/_jsxDEV(Spinner, {\n        animation: \"border\",\n        variant: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: tables.filter(table => table.data.length > 0).map(table => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: table.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"table-responsive\",\n            style: {\n              maxHeight: '50vh'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              className: \"table table-bordered table-striped\",\n              ref: tableRef,\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: table.columns.map(col => /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: col.toUpperCase()\n                  }, col, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 217,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 215,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: table.data.map((row, idx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: table.columns.map(col => /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: row[col]\n                  }, col, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 225,\n                    columnNumber: 27\n                  }, this))\n                }, idx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 223,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-footer text-center\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => handlePageChange(table.key, table.setPage, table.page - 1),\n            disabled: table.page === 1 || loadingState,\n            children: \"Previous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"page-number\",\n            children: `Page ${table.page} of ${table.totalPages}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => handlePageChange(table.key, table.setPage, table.page + 1),\n            disabled: table.page === table.totalPages || loadingState,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this)]\n      }, table.title, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"HdYTKFBL5v9Y1blYGF6/6zrcpj4=\", false, function () {\n  return [useAuth0, useQuery];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useQuery","gql","Button","useAuth0","Spinner","ScrollToTop","jsxDEV","_jsxDEV","Dashboard","_s","_data$employees_aggre","_data$employees_aggre2","_data$transactions_ag","_data$transactions_ag2","_data$inventory_aggre","_data$inventory_aggre2","_data$customers_aggre","_data$customers_aggre2","limit","tableRef","isAuthenticated","loginWithRedirect","user","role","id","console","log","GET_DATA","includes","employeesPage","setEmployeesPage","transactionsPage","setTransactionsPage","inventoryPage","setInventoryPage","customersPage","setCustomersPage","loading","error","data","fetchMore","variables","employeesOffset","transactionsOffset","inventoryOffset","customersOffset","fetchPolicy","loadingState","setLoadingState","window","scrollTo","current","scrollIntoView","behavior","block","updateQuery","prev","fetchMoreResult","Employees","employees","children","fileName","_jsxFileName","lineNumber","columnNumber","message","handlePageChange","tableKey","setPage","newPage","setTimeout","tables","title","columns","page","totalPages","Math","ceil","employees_aggregate","aggregate","count","transactions","transactions_aggregate","inventory","inventory_aggregate","customers","customers_aggregate","className","animation","variant","filter","table","length","map","style","maxHeight","ref","col","toUpperCase","row","idx","onClick","key","disabled","_c","$RefreshReg$"],"sources":["/Users/houdalahrouz/Desktop/CS-25-319-Analyzing-and-Designing-Complex-systems-using-graphql/src/my-dashboard/src/components/Dashboard.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { useQuery, gql } from '@apollo/client';\nimport './Dashboard.css'; // Import the CSS file\nimport { Button } from 'react-bootstrap';\nimport { useAuth0 } from '@auth0/auth0-react';\nimport { Spinner } from 'react-bootstrap';\nimport ScrollToTop from \"./ScrollToTop\";\n\nfunction Dashboard() {\n  const limit = 8; // Number of items per page\n  const tableRef = useRef(null); // Create a ref for the table element\n  const { isAuthenticated, loginWithRedirect, user } = useAuth0(); // Auth0 hook\n\n  let role;\n  let id = '0';\n\n  if(user){\n    role = user[\"https://hasura.io/jwt/claims\"][\"x-hasura-role\"]\n    id = user['https://hasura.io/jwt/claims']['x-hasura-user-id']\n\n    console.log(role)\n  }\n  else{\n    loginWithRedirect();\n  }\n\n    const GET_DATA = gql`\n    query GetData(\n      $employeesOffset: Int, $transactionsOffset: Int,\n      $inventoryOffset: Int, $customersOffset: Int, $limit: Int, $id: String\n    ) {\n      ${role === \"HR_Manager\" || role === \"HR_Employee\" ? `\n        employees(offset: $employeesOffset, limit: $limit) {\n          employeeid firstname lastname email department\n        }\n        employees_aggregate { aggregate { count } }\n      ` : role === \"Sales_Manager\" ? `\n        employees(where: { departmentid: { _eq: \"102\" } }, offset: $employeesOffset, limit: $limit) {\n          employeeid firstname lastname email department\n        }\n        employees_aggregate(where: { departmentid: { _eq: \"102\" } }) { aggregate { count } }\n      ` : role === \"IT_Manager\" ? `\n        employees(offset: $employeesOffset, limit: $limit) {\n          employeeid firstname lastname email department\n        }\n        employees_aggregate(where: { departmentid: { _eq: \"103\" } }) { aggregate { count } }\n      ` : `\n        employees {\n          employeeid firstname lastname email department\n        }\n        employees_aggregate { aggregate { count } }\n      `}      \n      \n      ${[\"host\", \"Sales_Manager\", \"Sales_Employee\",].includes(role) ? `\n        transactions(offset: $transactionsOffset, limit: $limit) {\n          transactionid buyerid sellerid totalprice transactiondate\n        }\n        transactions_aggregate { aggregate { count } }\n      ` : \"\"}\n\n      ${[\"host\", \"IT_Manager\", \"IT_Employee\"].includes(role) ? `\n        inventory(offset: $inventoryOffset, limit: $limit) {\n          itemid itemdescription availablequantity itemprice\n        }\n        inventory_aggregate { aggregate { count } }\n      ` : \"\"}\n\n      ${[\"host\", \"Sales_Manager\", \"Sales_Employee\"].includes(role) ? `\n        customers(offset: $customersOffset, limit: $limit) {\n          customerid firstname lastname email phone address lastpurchasedate\n        }\n        customers_aggregate { aggregate { count } }\n      ` : \"\"}\n    }\n  `;\n\n\n  const [employeesPage, setEmployeesPage] = useState(1);\n  const [transactionsPage, setTransactionsPage] = useState(1);\n  const [inventoryPage, setInventoryPage] = useState(1);\n  const [customersPage, setCustomersPage] = useState(1);\n\n\n\n  const { loading, error, data, fetchMore } = useQuery(GET_DATA, {\n    variables: {\n      employeesOffset: (employeesPage - 1) * limit,\n      transactionsOffset: (transactionsPage - 1) * limit,\n      inventoryOffset: (inventoryPage - 1) * limit,\n      customersOffset: (customersPage - 1) * limit,\n      limit: limit,\n      id: id\n    },\n    fetchPolicy: 'network-only'\n  });\n\n  console.log(data)\n\n  const [loadingState, setLoadingState] = useState(false);\n\n  useEffect(() => {\n    window.scrollTo(0, 0); // Scroll to top on mount\n  }, []);\n\n  useEffect(() => {\n    if (!isAuthenticated) {\n      loginWithRedirect(); // Redirect to login if not authenticated\n    }\n  }, [isAuthenticated, loginWithRedirect]);\n\n  useEffect(() => {\n    if (tableRef.current) {\n      tableRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' }); // Scroll to the table when it's rendered\n    }\n  }, [data]);\n\n  useEffect(() => {\n    if (employeesPage > 1 || transactionsPage > 1 || inventoryPage > 1 || customersPage > 1) {\n      fetchMore({\n        variables: {\n          employeesOffset: (employeesPage - 1) * limit,\n          transactionsOffset: (transactionsPage - 1) * limit,\n          inventoryOffset: (inventoryPage - 1) * limit,\n          customersOffset: (customersPage - 1) * limit,\n          limit: limit\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult) return prev;\n          return {\n            ...prev,\n            Employees: fetchMoreResult.employees,\n          };\n        },\n      });\n    }\n  }, [fetchMore, limit, customersPage, employeesPage, inventoryPage, transactionsPage]);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n\n  const handlePageChange = (tableKey, setPage, newPage) => {\n    setLoadingState(true); \n  \n    fetchMore({\n      variables: {\n        employeesOffset: (tableKey === 'employees' ? (newPage - 1) * limit : (employeesPage - 1) * limit),\n        transactionsOffset: (tableKey === 'transactions' ? (newPage - 1) * limit : (transactionsPage - 1) * limit),\n        inventoryOffset: (tableKey === 'inventory' ? (newPage - 1) * limit : (inventoryPage - 1) * limit),\n        customersOffset: (tableKey === 'customers' ? (newPage - 1) * limit : (customersPage - 1) * limit),\n        limit: limit,\n      },\n      updateQuery: (prev, { fetchMoreResult }) => {\n        setTimeout(() => setLoadingState(false), 500); \n        return fetchMoreResult || prev;\n      },\n    });\n  \n    setPage(newPage);\n  };\n  \n\n  const tables = [\n    {\n      title: 'Employees',\n      data: data?.employees || [],\n      columns: ['employeeid', 'firstname', 'lastname', 'email', 'department'],\n      page: employeesPage,\n      setPage: setEmployeesPage,\n      totalPages: Math.ceil((data?.employees_aggregate?.aggregate?.count || 0) / limit),\n    },\n    {\n      title: 'Transactions',\n      data: data?.transactions || [],\n      columns: ['transactionid', 'buyerid', 'sellerid', 'totalprice', 'transactiondate'],\n      page: transactionsPage,\n      setPage: setTransactionsPage,\n      totalPages: Math.ceil((data?.transactions_aggregate?.aggregate?.count || 0) / limit),\n    },\n    {\n      title: 'Inventory',\n      data: data?.inventory || [],\n      columns: ['itemid', 'itemdescription', 'availablequantity', 'itemprice'],\n      page: inventoryPage,\n      setPage: setInventoryPage,\n      totalPages: Math.ceil((data?.inventory_aggregate?.aggregate?.count || 0) / limit),\n    },\n    {\n      title: 'Customers',\n      data: data?.customers || [],\n      columns: ['customerid', 'firstname', 'lastname', 'email', 'phone', 'address', 'lastpurchasedate'],\n      page: customersPage,\n      setPage: setCustomersPage,\n      totalPages: Math.ceil((data?.customers_aggregate?.aggregate?.count || 0) / limit),\n    },\n  ]; \n  \n  return (\n    <div className=\"center-container\">\n      <ScrollToTop/>\n      {loadingState && (\n        <div className=\"loading-overlay\">\n          <Spinner animation=\"border\" variant=\"primary\" />\n        </div>\n      )}\n      <div className=\"container\">\n        {tables.filter(table => table.data.length>0).map((table) => (\n          <div className=\"card mb-4\" key={table.title}>\n            <div className=\"card-header\">\n              <h3>{table.title}</h3>\n            </div>\n            <div className=\"card-body\">\n              <div className=\"table-responsive\" style={{ maxHeight: '50vh' }}>\n                <table className=\"table table-bordered table-striped\" ref={tableRef}>\n                  <thead>\n                    <tr>\n                      {table.columns.map((col) => (\n                        <th key={col}>{col.toUpperCase()}</th>\n                      ))}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {table.data.map((row, idx) => (\n                      <tr key={idx}>\n                        {table.columns.map((col) => (\n                          <td key={col}>{row[col]}</td>\n                        ))}\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n            <div className=\"card-footer text-center\">\n            <Button onClick={() => handlePageChange(table.key, table.setPage, table.page - 1)} disabled={table.page === 1 || loadingState}>                \n              Previous\n            </Button>\n            <span className=\"page-number\">{`Page ${table.page} of ${table.totalPages}`}</span>\n            <Button onClick={() => handlePageChange(table.key, table.setPage, table.page + 1)} disabled={table.page === table.totalPages || loadingState}>\n              Next\n            </Button>\n            </div>\n          </div>\n        ))\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}