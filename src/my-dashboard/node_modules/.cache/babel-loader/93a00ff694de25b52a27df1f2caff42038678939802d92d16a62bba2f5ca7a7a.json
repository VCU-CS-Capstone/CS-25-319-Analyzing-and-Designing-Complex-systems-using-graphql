{"ast":null,"code":"var _jsxFileName = \"/Users/gracejohnson/CS-24-314-Graph-QL---Providing-Different-Perspectives/src/my-dashboard/src/components/Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = () => {\n  _s();\n  const {\n    user,\n    isAuthenticated,\n    getAccessTokenSilently\n  } = useAuth0();\n  const [userRoles, setUserRoles] = useState([]);\n  useEffect(() => {\n    const fetchUserRoles = async () => {\n      try {\n        if (isAuthenticated) {\n          const accessToken = await getAccessTokenSilently();\n          // Here, you would typically fetch the user's roles from your backend using the access token.\n          // For demonstration purposes, let's assume the roles are stored in the user object.\n          const roles = user.roles || [];\n          setUserRoles(roles);\n        }\n      } catch (error) {\n        console.error(\"Error fetching user roles:\", error);\n      }\n    };\n    fetchUserRoles();\n  }, [getAccessTokenSilently, isAuthenticated, user]);\n  return isAuthenticated && /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: user.picture,\n      alt: user.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: user.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: user.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Roles: \", userRoles.join(\", \")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 7\n  }, this);\n};\n_s(Profile, \"OlC5cZXORV/EQ1C91nFFY/WtScM=\", false, function () {\n  return [useAuth0];\n});\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useEffect","useState","useAuth0","jsxDEV","_jsxDEV","Profile","_s","user","isAuthenticated","getAccessTokenSilently","userRoles","setUserRoles","fetchUserRoles","accessToken","roles","error","console","children","src","picture","alt","name","fileName","_jsxFileName","lineNumber","columnNumber","email","join","_c","$RefreshReg$"],"sources":["/Users/gracejohnson/CS-24-314-Graph-QL---Providing-Different-Perspectives/src/my-dashboard/src/components/Profile.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\nconst Profile = () => {\r\n  const { user, isAuthenticated, getAccessTokenSilently } = useAuth0();\r\n  const [userRoles, setUserRoles] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchUserRoles = async () => {\r\n      try {\r\n        if (isAuthenticated) {\r\n          const accessToken = await getAccessTokenSilently();\r\n          // Here, you would typically fetch the user's roles from your backend using the access token.\r\n          // For demonstration purposes, let's assume the roles are stored in the user object.\r\n          const roles = user.roles || [];\r\n          setUserRoles(roles);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching user roles:\", error);\r\n      }\r\n    };\r\n\r\n    fetchUserRoles();\r\n  }, [getAccessTokenSilently, isAuthenticated, user]);\r\n\r\n  return (\r\n    isAuthenticated && (\r\n      <div>\r\n        <img src={user.picture} alt={user.name} />\r\n        <h2>{user.name}</h2>\r\n        <p>{user.email}</p>\r\n        <p>Roles: {userRoles.join(\", \")}</p> {/* Display user's roles */}\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM;IAAEC,IAAI;IAAEC,eAAe;IAAEC;EAAuB,CAAC,GAAGP,QAAQ,CAAC,CAAC;EACpE,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,MAAMY,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,IAAIJ,eAAe,EAAE;UACnB,MAAMK,WAAW,GAAG,MAAMJ,sBAAsB,CAAC,CAAC;UAClD;UACA;UACA,MAAMK,KAAK,GAAGP,IAAI,CAACO,KAAK,IAAI,EAAE;UAC9BH,YAAY,CAACG,KAAK,CAAC;QACrB;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IAEDH,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACH,sBAAsB,EAAED,eAAe,EAAED,IAAI,CAAC,CAAC;EAEnD,OACEC,eAAe,iBACbJ,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAKc,GAAG,EAAEX,IAAI,CAACY,OAAQ;MAACC,GAAG,EAAEb,IAAI,CAACc;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1CrB,OAAA;MAAAa,QAAA,EAAKV,IAAI,CAACc;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACpBrB,OAAA;MAAAa,QAAA,EAAIV,IAAI,CAACmB;IAAK;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnBrB,OAAA;MAAAa,QAAA,GAAG,SAAO,EAACP,SAAS,CAACiB,IAAI,CAAC,IAAI,CAAC;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClC,CACN;AAEL,CAAC;AAACnB,EAAA,CAhCID,OAAO;EAAA,QAC+CH,QAAQ;AAAA;AAAA0B,EAAA,GAD9DvB,OAAO;AAkCb,eAAeA,OAAO;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}